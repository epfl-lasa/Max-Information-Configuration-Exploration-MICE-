# BASE PARAMETERS

# Directories
savePath: "/home/sthithpragya/Study/Thesis/data_for_learning/recorded_data/session18_125k_gravComp"   # location of the 'recorded_data' directory
learntModelLoc: "/home/sthithpragya/Study/Thesis/InvDyn_Learning/learning/learnt_models"              # location of the 'learnt_models' directory

# General Parameters
totalJoints: 7          # DoF of the manipulator
learnErrorModel: True   # False <-> Torque Models; True <-> Error Models
crossValFoldCount: 10   # Folds for cross-validation on the training dataset

startModelIndex: 0      # For cross-validation/ training/ testing of specific joint models, 
endModelIndex: 7        # specify start and end indices OR set to 0 and (# of joints)
                        # Not applicable to ANN_Coupled (since it always trains a single model)
#-----------------------------------------------

# FOR NUSVR (thundersvm implementation)
testFoldSize: 10000     # Number of data entries in each fold for the test set 
                        # Number of folds determined automatically
                        # for session18 = 10000

nu: 0.1                 

# C and Gamma values to run gridsearch on
gridSearchCList: [0.1, 1, 10, 100, 1000]                  
gridSearchGammaList: [0.01, 0.1, 1, 10, 100, 1000, 10000] 

# Joint-wise best performing combinations of C and Gamma (tuned hyperparameters)
tunedCList: [100, 100, 100, 100, 10, 100, 0.1] 
tunedGammaList: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]

# Parameters to specify SVM parameters
process: 4              # Use SVM for - nuSVR
kernel: 2               # SVM Kernel  - RBF
epsilon: 0.1            # not being used currently
error: 0.001            # termination condition during training
nu: 0.1                 # nu for nuSVR
#-----------------------------------------------

# FOR ANN (PyTorch implementation)
# Learning rate, Hidden layer count and Neurons per layer values to run gridsearch on
etaGrid: [0.01, 0.05]                                   
hiddenLayerGrid: [1, 2, 3, 4, 5]
hiddenNeuronGrid: [25, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]

# Tuned values for ANN_coupled
etaCoupled: 0.01
layersCoupled: 3
neuronsCoupled: 250

# Tuned joint-wise values for ANN_decoupled
etaDecoupled: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
layersDecoupled: [3, 3, 3, 3, 3, 3, 3]
neuronsDecoupled: [250, 250, 250, 250, 250, 250, 250]
#-----------------------------------------------

# FOR LEAST SQUARES REGRESSION (scikit implementatin)
linkCount: 10           # Dependant on robot URDF 
linkParam: 10           # Usually 10, more if friction terms explicitly modelled
                        # [m lx ly lz Ixx Ixy Ixz Iyy Iyz Izz]

zeroParamCount: 29      # Due to usage of 'fixed' links, physical parameters of
                        # the first links don't affect the dynamics. Here, the 
                        # first 29 parameters don't have any effect.
                        # Set to 0 if not required

# NOTE: Manually enter the physical parameters of the robot (wrt CAD data) in LSR/LSROptimisation.py, line 74 onwards

# Exernal bounds placed on physical parameters to make sure they lie within 
# the selected bound rabge of the original CAD data

# bounded: "absolute"   # Loose absolute bounds on the physical parameters (optimised parameters may not be physically consistent)
bounded: "50%"          # Optimised parameters = Within 50% of CAD data
# bounded: "25%"        # Optimised parameters = Within 25% of CAD data
#-----------------------------------------------
